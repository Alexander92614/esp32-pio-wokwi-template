@page "/events"
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Eventos registrados</PageTitle>


<h1>Eventos de la base de datos</h1>
<div class="d-flex flex-wrap mb-3 gap-2">
    <button class="btn btn-primary" @onclick="ReloadEvents"><i class="bi bi-arrow-clockwise"></i> Actualizar</button>
    <button class="btn btn-danger" @onclick="DeleteDatabase"><i class="bi bi-trash"></i> Eliminar BD</button>
    <button class="btn btn-success" @onclick="CreateDatabase"><i class="bi bi-database-add"></i> Crear BD</button>
</div>

<div class="input-group mb-3" style="max-width: 400px;">
    <input type="text" class="form-control" placeholder="Nuevo comando" @bind="newCommand" />
    <button class="btn btn-info" @onclick="AddEvent"><i class="bi bi-plus-circle"></i> Agregar evento</button>
</div>

@if (events == null)
{
    <p>Cargando...</p>
}
else if (events.Count == 0)
{
    <p>No hay eventos registrados.</p>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>#</th>
                <th>Fecha</th>
                <th>Comando</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ev in events)
            {
                <tr>
                    <td><span class="badge bg-primary">@ev.Id</span></td>
                    <td>@FormatDate(ev.Timestamp)</td>
                    <td>
                        <span class="fw-bold text-success">@ev.Command</span>
                    </td>
                    <td>
                        @if (editEventId == ev.Id)
                        {
                            <div class="input-group input-group-sm" style="max-width: 200px;">
                                <input type="text" class="form-control" @bind="editCommand" />
                                <button class="btn btn-success" title="Guardar" @onclick="() => SaveEdit(ev.Id)"><i class="bi bi-check-lg"></i></button>
                                <button class="btn btn-secondary" title="Cancelar" @onclick="CancelEdit"><i class="bi bi-x-lg"></i></button>
                            </div>
                        }
                        else
                        {
                            <button class="btn btn-warning btn-sm me-2" title="Editar" @onclick="() => StartEdit(ev.Id, ev.Command)"><i class="bi bi-pencil-square"></i> Editar</button>
                        }
                        <button class="btn btn-danger btn-sm" title="Eliminar" @onclick="() => DeleteEvent(ev.Id)"><i class="bi bi-trash"></i> Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    public class EventRecord
    {
        public int Id { get; set; }
        public string? Timestamp { get; set; }
        public string? Command { get; set; }
    }

    private string FormatDate(string? timestamp)
    {
        if (string.IsNullOrWhiteSpace(timestamp)) return "";
        if (DateTime.TryParse(timestamp, out var dt))
            return dt.ToString("dd/MM/yyyy HH:mm:ss");
        return timestamp;
    }

    List<EventRecord>? events;
    string newCommand = string.Empty;
    int? editEventId = null;
    string editCommand = string.Empty;
    private void StartEdit(int id, string? command)
    {
        editEventId = id;
        editCommand = command ?? string.Empty;
    }

    private void CancelEdit()
    {
        editEventId = null;
        editCommand = string.Empty;
    }

    private async Task SaveEdit(int id)
    {
        var content = new StringContent($"{{\"command\":\"{editCommand}\"}}", System.Text.Encoding.UTF8, "application/json");
        await Http.PutAsync(Navigation.BaseUri + $"events/update/{id}", content);
        editEventId = null;
        editCommand = string.Empty;
        await ReloadEvents();
    }

    private async Task DeleteEvent(int id)
    {
        await Http.DeleteAsync(Navigation.BaseUri + $"events/delete/{id}");
        await ReloadEvents();
    }


    protected override async Task OnInitializedAsync()
    {
        events = await LoadEventsAsync();
    }


    private async Task ReloadEvents()
    {
        events = await LoadEventsAsync();
        StateHasChanged();
    }

    private async Task DeleteDatabase()
    {
        await Http.PostAsync(Navigation.BaseUri + "events/delete", null);
        await ReloadEvents();
    }

    private async Task CreateDatabase()
    {
        await Http.PostAsync(Navigation.BaseUri + "events/create", null);
        await ReloadEvents();
    }

    private async Task AddEvent()
    {
        if (!string.IsNullOrWhiteSpace(newCommand))
        {
            var content = new StringContent($"{{\"command\":\"{newCommand}\"}}", System.Text.Encoding.UTF8, "application/json");
            await Http.PostAsync(Navigation.BaseUri + "events/add", content);
            newCommand = string.Empty;
            await ReloadEvents();
        }
    }

    private async Task<List<EventRecord>> LoadEventsAsync()
    {
        try
        {
            var url = Navigation.BaseUri + "events";
            var response = await Http.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var result = System.Text.Json.JsonSerializer.Deserialize<List<EventRecord>>(json);
                return result ?? new List<EventRecord>();
            }
        }
        catch
        {
            // Manejo de errores
        }
        return new List<EventRecord>();
    }
}
